Here's a program to create a chessboard with a full set of chess pieces:

```python
from helper import *

"""
a chessboard with a full set of chess pieces
"""

@register()
def chessboard_square(color: tuple[float, float, float]) -> Shape:
    return primitive_call('cube', color=color, shape_kwargs={'scale': (0.125, 0.02, 0.125)})

@register()
def chessboard() -> Shape:
    def loop_fn(i) -> Shape:
        row, col = divmod(i, 8)
        color = (0.9, 0.9, 0.9) if (row + col) % 2 == 0 else (0.1, 0.1, 0.1)
        square = library_call('chessboard_square', color=color)
        return transform_shape(square, translation_matrix((col * 0.125, 0, row * 0.125)))
    
    return loop(64, loop_fn)

@register()
def pawn() -> Shape:
    base = primitive_call('cylinder', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.04, 'p0': (0, 0, 0), 'p1': (0, 0.05, 0)})
    body = primitive_call('sphere', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.03})
    body = transform_shape(body, translation_matrix((0, 0.08, 0)))
    return concat_shapes(base, body)

@register()
def rook() -> Shape:
    base = primitive_call('cylinder', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.04, 'p0': (0, 0, 0), 'p1': (0, 0.05, 0)})
    body = primitive_call('cube', color=(0.8, 0.8, 0.8), shape_kwargs={'scale': (0.06, 0.08, 0.06)})
    body = transform_shape(body, translation_matrix((0, 0.09, 0)))
    return concat_shapes(base, body)

@register()
def knight() -> Shape:
    base = primitive_call('cylinder', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.04, 'p0': (0, 0, 0), 'p1': (0, 0.05, 0)})
    body = primitive_call('sphere', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.04})
    body = transform_shape(body, translation_matrix((0, 0.09, 0)))
    head = primitive_call('cylinder', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.02, 'p0': (0, 0.09, 0), 'p1': (0.04, 0.13, 0)})
    return concat_shapes(base, body, head)

@register()
def bishop() -> Shape:
    base = primitive_call('cylinder', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.04, 'p0': (0, 0, 0), 'p1': (0, 0.05, 0)})
    body = primitive_call('sphere', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.035})
    body = transform_shape(body, translation_matrix((0, 0.09, 0)))
    top = primitive_call('sphere', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.015})
    top = transform_shape(top, translation_matrix((0, 0.14, 0)))
    return concat_shapes(base, body, top)

@register()
def queen() -> Shape:
    base = primitive_call('cylinder', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.04, 'p0': (0, 0, 0), 'p1': (0, 0.05, 0)})
    body = primitive_call('sphere', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.045})
    body = transform_shape(body, translation_matrix((0, 0.09, 0)))
    crown = primitive_call('cylinder', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.02, 'p0': (0, 0.13, 0), 'p1': (0, 0.16, 0)})
    return concat_shapes(base, body, crown)

@register()
def king() -> Shape:
    base = primitive_call('cylinder', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.04, 'p0': (0, 0, 0), 'p1': (0, 0.05, 0)})
    body = primitive_call('sphere', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.045})
    body = transform_shape(body, translation_matrix((0, 0.09, 0)))
    cross_v = primitive_call('cylinder', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.01, 'p0': (0, 0.13, 0), 'p1': (0, 0.18, 0)})
    cross_h = primitive_call('cylinder', color=(0.8, 0.8, 0.8), shape_kwargs={'radius': 0.01, 'p0': (-0.02, 0.16, 0), 'p1': (0.02, 0.16, 0)})
    return concat_shapes(base, body, cross_v, cross_h)

@register()
def place_pieces() -> Shape:
    pieces = []
    piece_order = ['rook', 'knight', 'bishop', 'queen', 'king', 'bishop', 'knight', 'rook']
    
    for i, piece_name in enumerate(piece_order):
        white_piece = library_call(piece_name)
        black_piece = transform_shape(library_call(piece_name), scale_matrix(1, (0, 0, 0)))
        black_piece = transform_shape(black_piece, translation_matrix((0, 0, 0.875)))
        
        white_piece = transform_shape(white_piece, translation_matrix((i * 0.125, 0.02, 0)))
        black_piece = transform_shape(black_piece, translation_matrix((i * 0.125, 0.02, 0)))
        
        pieces.extend([white_piece, black_piece])
    
    for i in range(8):
        white_pawn = transform_shape(library_call('pawn'), translation_matrix((i * 0.125, 0.02, 0.125)))
        black_pawn = transform_shape(library_call('pawn'), translation_matrix((i * 0.125, 0.02, 0.75)))
        pieces.extend([white_pawn, black_pawn])
    
    return concat_shapes(*pieces)

@register()
def chessboard_with_pieces() -> Shape:
    board = library_call('chessboard')
    pieces = library_call('place_pieces')
    return concat_shapes(board, pieces)
```

This program creates a chessboard with a full set of chess pieces. Here's a breakdown of the functions:

1. `chessboard_square`: Creates a single square of the chessboard.
2. `chessboard`: Creates the entire chessboard by placing 64 squares in an 8x8 grid.
3. `pawn`, `rook`, `knight`, `bishop`, `queen`, `king`: Create individual chess pieces using primitive shapes.
4. `place_pieces`: Places all the chess pieces in their starting positions on the board.
5. `chessboard_with_pieces`: Combines the chessboard and the placed pieces into a single shape.

The chessboard is created with alternating light and dark squares, and the pieces are placed in their correct starting positions. The white pieces are on the bottom two rows, and the black pieces are on the top two rows of the board.