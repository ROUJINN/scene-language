I'll help you create a model of the Tower of Pisa with its characteristic tilt and cylindrical architecture. Here's the implementation:

```python
from helper import *

"""
Tower of Pisa
"""

@register()
def tower_level(radius: float, height: float, columns: int = 8) -> Shape:
    """Creates one level of the tower with columns around the perimeter"""
    def column_fn(i: int) -> Shape:
        angle = (2 * math.pi * i) / columns
        x = radius * math.cos(angle)
        z = radius * math.sin(angle)
        return primitive_call('cylinder', 
                            color=(0.9, 0.9, 0.85),
                            shape_kwargs={
                                'radius': radius/6,
                                'p0': (x, 0, z),
                                'p1': (x, height, z)
                            })
    
    # Create central cylinder and surrounding columns
    central = primitive_call('cylinder', 
                           color=(0.85, 0.85, 0.8),
                           shape_kwargs={
                               'radius': radius * 0.8,
                               'p0': (0, 0, 0),
                               'p1': (0, height, 0)
                           })
    columns = loop(columns, column_fn)
    return concat_shapes(central, columns)

@register()
def tower_top(radius: float, height: float) -> Shape:
    """Creates the bell tower top"""
    bell_chamber = primitive_call('cylinder',
                                color=(0.9, 0.9, 0.85),
                                shape_kwargs={
                                    'radius': radius * 0.9,
                                    'p0': (0, 0, 0),
                                    'p1': (0, height * 0.7, 0)
                                })
    
    dome = primitive_call('sphere',
                         color=(0.85, 0.85, 0.8),
                         shape_kwargs={'radius': radius * 0.7})
    
    dome = transform_shape(dome, translation_matrix((0, height * 0.7, 0)))
    return concat_shapes(bell_chamber, dome)

@register()
def leaning_tower() -> Shape:
    """Creates the complete Leaning Tower of Pisa"""
    # Constants for the tower
    base_radius = 1.0
    level_height = 0.8
    levels = 8
    
    # Create base
    base = primitive_call('cylinder',
                         color=(0.85, 0.85, 0.8),
                         shape_kwargs={
                             'radius': base_radius * 1.2,
                             'p0': (0, 0, 0),
                             'p1': (0, level_height * 0.5, 0)
                         })
    
    def level_fn(i: int) -> Shape:
        # Gradually decrease radius for each level
        current_radius = base_radius * (1 - i * 0.03)
        level = library_call('tower_level', radius=current_radius, height=level_height)
        # Stack levels
        level = transform_shape(level, translation_matrix((0, level_height * (i + 0.5), 0)))
        return level
    
    # Create main tower body
    tower_body = loop(levels, level_fn)
    
    # Add top
    top = library_call('tower_top', radius=base_radius * 0.75, height=level_height)
    top = transform_shape(top, translation_matrix((0, level_height * (levels + 0.5), 0)))
    
    # Combine all parts
    tower = concat_shapes(base, tower_body, top)
    
    # Apply the famous lean
    tower_center = compute_shape_center(tower)
    lean_angle = -0.1  # approximately 5.7 degrees
    leaning_tower = transform_shape(tower, 
                                  rotation_matrix(lean_angle, 
                                                direction=(1, 0, 0),
                                                point=(0, 0, 0)))
    
    return leaning_tower
```

This implementation creates a simplified but recognizable version of the Leaning Tower of Pisa with these key features:

1. `tower_level`: Creates one level of the tower with a central cylinder and surrounding columns
2. `tower_top`: Creates the bell chamber and dome at the top
3. `leaning_tower`: Assembles the complete tower with:
   - A wider base
   - Multiple levels with gradually decreasing radius
   - Decorative columns around each level
   - A bell chamber and dome at the top
   - The characteristic lean (about 5.7 degrees)

The tower is created with a modular approach where:
- Each level has columns around its perimeter
- The radius slightly decreases with height for a more realistic appearance
- The tower is tilted using a rotation matrix
- Colors are kept in the off-white/beige range typical of marble
- The structure maintains proportions similar to the real tower

You can create the tower by calling:
```python
tower = library_call('leaning_tower')
```