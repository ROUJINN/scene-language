```python
from helper import *

"""
Reconstruct the input scene of dessert glasses
"""

@register()
def glass_stem(height: float, radius: float, color: tuple[float, float, float]) -> Shape:
    stem = primitive_call('cylinder', shape_kwargs={'radius': radius, 'p0': (0, 0, 0), 'p1': (0, height, 0)}, color=color)
    base = primitive_call('cylinder', shape_kwargs={'radius': radius * 2, 'p0': (0, 0, 0), 'p1': (0, height * 0.1, 0)}, color=color)
    return concat_shapes(stem, base)

@register()
def glass_bowl(radius: float, height: float, color: tuple[float, float, float]) -> Shape:
    bowl = primitive_call('sphere', shape_kwargs={'radius': radius}, color=color)
    return transform_shape(bowl, translation_matrix((0, height, 0)))

@register()
def dessert_glass(stem_height: float, stem_radius: float, bowl_radius: float, color: tuple[float, float, float]) -> Shape:
    stem = library_call('glass_stem', height=stem_height, radius=stem_radius, color=color)
    bowl = library_call('glass_bowl', radius=bowl_radius, height=stem_height, color=color)
    return concat_shapes(stem, bowl)

@register()
def dessert(glass: Shape, filling_color: tuple[float, float, float], topping_color: tuple[float, float, float]) -> Shape:
    glass_height = compute_shape_sizes(glass)[1]
    glass_radius = compute_shape_sizes(glass)[0] / 2

    filling = primitive_call('cylinder', shape_kwargs={'radius': glass_radius * 0.9, 'p0': (0, glass_height * 0.6, 0), 'p1': (0, glass_height * 0.9, 0)}, color=filling_color)
    
    topping = primitive_call('sphere', shape_kwargs={'radius': glass_radius * 0.3}, color=topping_color)
    topping = transform_shape(topping, translation_matrix((0, glass_height * 0.95, 0)))
    
    return concat_shapes(glass, filling, topping)

@register()
def dessert_scene() -> Shape:
    glass1 = library_call('dessert_glass', stem_height=0.3, stem_radius=0.02, bowl_radius=0.1, color=(0.9, 0.9, 0.9))
    glass2 = library_call('dessert_glass', stem_height=0.35, stem_radius=0.015, bowl_radius=0.08, color=(0.9, 0.9, 0.9))
    glass3 = library_call('dessert_glass', stem_height=0.32, stem_radius=0.018, bowl_radius=0.09, color=(0.9, 0.9, 0.9))
    glass4 = library_call('dessert_glass', stem_height=0.2, stem_radius=0.025, bowl_radius=0.12, color=(0.9, 0.9, 0.9))

    dessert1 = library_call('dessert', glass=glass1, filling_color=(0.6, 0.3, 0.1), topping_color=(1.0, 1.0, 1.0))
    dessert2 = library_call('dessert', glass=glass2, filling_color=(0.2, 0.8, 0.2), topping_color=(1.0, 0.8, 0.8))
    dessert3 = library_call('dessert', glass=glass3, filling_color=(1.0, 0.8, 0.2), topping_color=(1.0, 0.0, 0.0))
    dessert4 = library_call('dessert', glass=glass4, filling_color=(1.0, 1.0, 1.0), topping_color=(1.0, 0.0, 0.0))

    dessert1 = transform_shape(dessert1, translation_matrix((-0.3, 0, 0)))
    dessert2 = transform_shape(dessert2, translation_matrix((-0.1, 0, 0)))
    dessert3 = transform_shape(dessert3, translation_matrix((0.1, 0, 0)))
    dessert4 = transform_shape(dessert4, translation_matrix((0.3, 0, 0)))

    return concat_shapes(dessert1, dessert2, dessert3, dessert4)
```