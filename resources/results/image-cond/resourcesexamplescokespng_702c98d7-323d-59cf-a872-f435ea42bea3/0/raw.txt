```python
from helper import *

"""
Reconstruct the input scene
"""

@register()
def soda_can(color: tuple[float, float, float] = (1.0, 0.0, 0.0)) -> Shape:
    can_body = primitive_call('cylinder', shape_kwargs={'radius': 0.05, 'p0': (0, 0, 0), 'p1': (0, 0.15, 0)}, color=color)
    can_top = primitive_call('cylinder', shape_kwargs={'radius': 0.05, 'p0': (0, 0.15, 0), 'p1': (0, 0.155, 0)}, color=(0.8, 0.8, 0.8))
    return concat_shapes(can_body, can_top)

@register()
def soda_can_pack(num_cans: int, rows: int, cols: int) -> Shape:
    def loop_fn(i: int) -> Shape:
        row = i // cols
        col = i % cols
        x_offset = col * 0.11
        z_offset = row * 0.11
        can = library_call('soda_can')
        return transform_shape(can, translation_matrix((x_offset, 0, z_offset)))

    return loop(num_cans, loop_fn)

@register()
def coca_cola_pack() -> Shape:
    pack = library_call('soda_can_pack', num_cans=6, rows=2, cols=3)
    
    # Add slight random rotations to each can
    def randomize_rotation(i: int) -> Shape:
        can = pack[i]
        center = compute_shape_center(can)
        angle = np.random.uniform(-0.05, 0.05)
        return transform_shape(can, rotation_matrix(angle, (0, 1, 0), center))
    
    rotated_pack = loop(6, randomize_rotation)
    
    # Create a base for the pack
    base = primitive_call('cube', shape_kwargs={'scale': (0.35, 0.01, 0.25)}, color=(0.9, 0.9, 0.9))
    base_top = compute_shape_max(base)[1]
    pack_bottom = compute_shape_min(rotated_pack)[1]
    
    return concat_shapes(
        base,
        transform_shape(rotated_pack, translation_matrix((0, base_top - pack_bottom + 0.001, 0)))
    )

@register()
def scene() -> Shape:
    pack = library_call('coca_cola_pack')
    return transform_shape(pack, translation_matrix((0, 0, 0)))
```